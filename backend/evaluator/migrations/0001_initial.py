# Generated by Django 5.0.1 on 2024-02-15 18:27

import django.contrib.auth.validators
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClassGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_year', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('abbreviation', models.CharField(max_length=5, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='DegreeProgram',
            fields=[
                ('name', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('abbreviation', models.CharField(max_length=5, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('DEGREE_PROGRAM_DIRECTOR', 'Degree Program Director'), ('COURSE_LEADER', 'Course Leader'), ('TUTOR', 'Tutor')], max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourseLeader',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('evaluator.user',),
            managers=[
                ('course_leader', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DegreeProgramDirector',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('evaluator.user',),
            managers=[
                ('degree_program_director', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Tutor',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('evaluator.user',),
            managers=[
                ('tutor', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nr', models.IntegerField()),
                ('name', models.CharField(max_length=50)),
                ('draft', models.JSONField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='evaluator.course')),
            ],
        ),
        migrations.CreateModel(
            name='CourseInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('class_group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='evaluator.classgroup')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='evaluator.course')),
            ],
        ),
        migrations.CreateModel(
            name='AssignmentInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('due_to', models.DateTimeField()),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='evaluator.assignment')),
                ('course_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='evaluator.courseinstance')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='degree_program',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='evaluator.degreeprogram'),
        ),
        migrations.AddField(
            model_name='classgroup',
            name='degree_program',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='evaluator.degreeprogram'),
        ),
        migrations.CreateModel(
            name='PreviousDeduction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exercise_name', models.CharField(max_length=50)),
                ('message', models.CharField(max_length=200)),
                ('points', models.DecimalField(decimal_places=2, max_digits=4)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='evaluator.assignment')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('class_group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='evaluator.classgroup')),
            ],
        ),
        migrations.AddField(
            model_name='courseinstance',
            name='directly_assigned_students',
            field=models.ManyToManyField(to='evaluator.student'),
        ),
        migrations.CreateModel(
            name='Correction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expense', models.DurationField(null=True)),
                ('status', models.CharField(choices=[('NOT_SUBMITTED', 'not submitted'), ('CORRECTED', 'corrected'), ('IN_PROGRESS', 'in progress'), ('UNDEFINED', 'undefined')], default='UNDEFINED', max_length=50)),
                ('points', models.DecimalField(decimal_places=2, max_digits=4, null=True)),
                ('draft', models.JSONField(null=True)),
                ('assignment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='evaluator.assignment')),
                ('student', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='co_student', to='evaluator.student')),
                ('tutor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='co_tutor', to='evaluator.student')),
            ],
        ),
        migrations.AddField(
            model_name='courseinstance',
            name='course_leaders',
            field=models.ManyToManyField(related_name='ci_course_leaders', to='evaluator.courseleader'),
        ),
        migrations.AddField(
            model_name='degreeprogram',
            name='dp_director',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='evaluator.degreeprogramdirector'),
        ),
        migrations.AddField(
            model_name='courseinstance',
            name='tutors',
            field=models.ManyToManyField(related_name='ci_tutors', to='evaluator.tutor'),
        ),
        migrations.AddConstraint(
            model_name='assignment',
            constraint=models.UniqueConstraint(fields=('nr', 'course'), name='assignment_pk'),
        ),
        migrations.AlterUniqueTogether(
            name='assignmentinstance',
            unique_together={('assignment', 'course_instance')},
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.UniqueConstraint(fields=('name', 'degree_program'), name='course_pk'),
        ),
        migrations.AddConstraint(
            model_name='courseinstance',
            constraint=models.UniqueConstraint(fields=('year', 'course'), name='course_instance_pk'),
        ),
    ]
